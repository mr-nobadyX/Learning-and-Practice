# Step-by-Step Guide for Implementing CRUD Operations in Node.js

## Overview

CRUD (Create, Read, Update, Delete) operations are fundamental in any application that manages data. This guide outlines 
the logical approach and step-by-step implementation of CRUD operations using Node.js, Express.js, MongoDB, and EJS templates.

---

## 1. **Setup Project**

1. **Initialize Project**:

   - Run `npm init -y` to create a `package.json` file.
   - Install required dependencies:
     ```bash
     npm install express mongoose ejs body-parser
     ```

2. **Create Project Structure**:

   ```plaintext
   project-directory/
   ├── models/           # For database models
   ├── views/            # For EJS templates
   ├── public/           # For static files (CSS, images, etc.)
   ├── app.js            # Main application file
   └── package.json      # Node.js project configuration
   ```

3. **Setup Express Server**:

   ```javascript
   const express = require('express');
   const mongoose = require('mongoose');
   const path = require('path');

   const app = express();

   app.set('view engine', 'ejs');
   app.use(express.json());
   app.use(express.urlencoded({ extended: true }));
   app.use(express.static(path.join(__dirname, 'public')));

   mongoose.connect('mongodb://127.0.0.1:27017/yourDatabaseName', {
       useNewUrlParser: true,
       useUnifiedTopology: true
   });

   app.listen(3000, () => console.log('Server running on port 3000'));
   ```

---

## 2. **Database Model**

1. **Define a Schema**:
   Create `models/user.js`:
   ```javascript
   const mongoose = require('mongoose');

   const userSchema = mongoose.Schema({
       name: String,
       email: String,
       image: String
   });

   module.exports = mongoose.model('User', userSchema);
   ```

---

## 3. **Implement CRUD Operations**

### A. **Create User**

1. **Form for Creating a User**:

   - Create `views/index.ejs`:
     ```html
     <form action="/create" method="post">
         <input name="name" placeholder="Name" type="text">
         <input name="email" placeholder="Email" type="email">
         <input name="image" placeholder="Image URL" type="text">
         <button type="submit">Create User</button>
     </form>
     ```

2. **Route for Creating User**:
   Add this route in `app.js`:

   ```javascript
   const User = require('./models/user');

   app.post('/create', async (req, res) => {
       const { name, email, image } = req.body;
       await User.create({ name, email, image });
       res.redirect('/read');
   });
   ```

---

### B. **Read Users**

1. **List Users**:

   - Create `views/read.ejs`:
     ```html
     <% if (users.length === 0) { %>
         <p>No users found.</p>
     <% } else { %>
         <% users.forEach(user => { %>
             <div>
                 <img src="<%= user.image %>" alt="<%= user.name %>">
                 <h3><%= user.name %></h3>
                 <p><%= user.email %></p>
                 <a href="/edit/<%= user._id %>">Edit</a>
                 <a href="/delete/<%= user._id %>">Delete</a>
             </div>
         <% }); %>
     <% } %>
     ```

2. **Route for Reading Users**:

   ```javascript
   app.get('/read', async (req, res) => {
       const users = await User.find();
       res.render('read', { users });
   });
   ```

---

### C. **Update User**

1. **Form for Editing a User**:

   - Create `views/edit.ejs`:
     ```html
     <form action="/update/<%= user._id %>" method="post">
         <input name="name" type="text" value="<%= user.name %>">
         <input name="email" type="email" value="<%= user.email %>">
         <input name="image" type="text" value="<%= user.image %>">
         <button type="submit">Update User</button>
     </form>
     ```

2. **Routes for Editing**:

   - Fetch user for editing:

     ```javascript
     app.get('/edit/:id', async (req, res) => {
         const user = await User.findById(req.params.id);
         res.render('edit', { user });
     });
     ```

   - Update user:

     ```javascript
     app.post('/update/:id', async (req, res) => {
         const { name, email, image } = req.body;
         await User.findByIdAndUpdate(req.params.id, { name, email, image });
         res.redirect('/read');
     });
     ```

---

### D. **Delete User**

1. **Route for Deleting a User**:
   ```javascript
   app.get('/delete/:id', async (req, res) => {
       await User.findByIdAndDelete(req.params.id);
       res.redirect('/read');
   });
   ```

---

## 4. **Testing**

1. Start your server: `node app.js`.
2. Test each functionality in your browser:
   - `http://localhost:3000` for the Create form.
   - `http://localhost:3000/read` for listing users.
   - `http://localhost:3000/edit/:id` for editing.

---

## 5. **Enhancements**

- Add validations for input fields.
- Handle errors gracefully using `try-catch`.
- Add a confirmation dialog for deletion.
- Style the app using CSS or TailwindCSS.

