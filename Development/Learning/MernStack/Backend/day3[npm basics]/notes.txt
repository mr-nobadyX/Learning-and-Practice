# NPM and Node.js Comprehensive Basics

## Core Concepts

### Node.js Fundamentals
- JavaScript runtime environment
- Executes JavaScript on server-side
- Built on Chrome's V8 JavaScript engine
- Event-driven, non-blocking I/O model

### NPM Overview
- Node Package Manager
- Manages packages and dependencies
- Enables sharing and reusing code
- Provides command-line interface for package management

## Package Management

### Installation Types
1. **Local Packages**
   - Project-specific dependencies
   - Installed in `node_modules`
   ```bash
   npm install package-name
   ```

2. **Global Packages**
   - System-wide tools
   ```bash
   npm install -g package-name
   ```

### Dependency Types
- `dependencies`: Production requirements
- `devDependencies`: Development tools
```bash
npm install --save express       # Production
npm install --save-dev nodemon   # Development
```

## Package.json Essentials
```json
{
  "name": "project-name",
  "version": "1.0.0",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {},
  "devDependencies": {}
}
```

### Scripts Management
```bash
# Run default scripts
npm start
npm test

# Run custom scripts
npm run dev
npm run build
```

## Module Types

### Core Modules
- Pre-installed with Node.js
- Immediate usage without installation
- Examples: 
  - `fs` (File System)
  - `http`
  - `path`
  - `os`

### External Modules
- Third-party packages
- Installed via npm
- Examples:
  - Express
  - Lodash
  - Axios

## Basic Package Commands
```bash
# Initialize project
npm init -y

# Install packages
npm install

# Add package
npm install package-name

# Remove package
npm uninstall package-name

# Update packages
npm update
```

## Version Management
- Semantic Versioning (SemVer)
- `^` allows minor updates
- `~` allows patch updates
- Exact version control

## Best Practices
- Use semantic versioning
- Separate dev/production dependencies
- Utilize npm scripts
- Regularly update packages
- Use `.npmrc` for configuration